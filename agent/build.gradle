plugins {
    id 'java'
    id "jacoco"
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'org.codesystem'

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

dependencies {
    implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.json:json:20231013'
    implementation 'com.github.oshi:oshi-core:6.4.12'
    implementation 'net.lingala.zip4j:zip4j:2.11.5'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mock-server:mockserver-client-java:5.15.0'
    testImplementation 'org.mock-server:mockserver-netty:5.15.0'
}

test {
    useJUnitPlatform()
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': 'org.codesystem.AgentApplication'
    }
    archiveBaseName.set("Agent")
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    with jar
}

sonar {
    properties {
        property "sonar.projectKey", "OPD-Agent"
        property "sonar.projectName", "OPD-Agent"
        property "sonar.qualitygate.wait", true
        property "sonar.java.fileByFile", true
        property "sonar.exclusions", "**/test/java/**/*"
        property "sonar.token", System.getenv("SONAR_TOKEN_AGENT")
    }
}